// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, MqController, stomp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stomp = require('stompjs');

  EventEmitter = require('events').EventEmitter;

  MqController = (function(_super) {
    __extends(MqController, _super);

    function MqController() {
      return MqController.__super__.constructor.apply(this, arguments);
    }

    MqController.prototype.connect = function(host, port, username, password, retryInterval, retryCount) {
      var connect, connectcb, errorcb;
      connectcb = (function(_this) {
        return function(frame) {
          console.log("MQ connected");
          return _this.emit('mq.connected', _this.client);
        };
      })(this);
      errorcb = (function(_this) {
        return function(error) {
          var err;
          if (_this.retryCount--) {
            return setTimeOut(connect, _this.retryInterval);
          } else {
            console.log("MQ conenctivity failed. Error is ", error);
            err = new Error;
            err = {
              args: [error],
              name: 'StormpConnectionError',
              message: "Failed due to error " + error
            };
            return _this.emit('mq.error', err);
          }
        };
      })(this);
      connect = (function(_this) {
        return function() {
          var headers;
          console.log("Debug: Stomp Client connecting to host: " + host + " port: " + port);
          headers = {
            login: username,
            passcode: password
          };
          return _this.client.connect(headers, connectcb, errorcb);
        };
      })(this);
      this.client = stomp.overTCP(host, port);
      this.client.heartbeat.outgoing = 20000;
      this.client.heartbeat.incoming = 0;
      return connect();
    };

    MqController.prototype.subscribe = function(queue, handler) {
      return this.client.subscribe(queue, handler);
    };

    MqController.prototype.unsubscribe = function(subscription) {
      return subscription.unsubscribe();
    };

    MqController.prototype.produce = function(queue, body) {
      return this.client.send(queue, {}, JSON.stringify(body));
    };

    MqController.prototype.ack = function(message) {
      return message.ack();
    };

    MqController.prototype.disconnect = function() {
      return this.client.disconnect();
    };

    return MqController;

  })(EventEmitter);

  module.exports = MqController;

}).call(this);
