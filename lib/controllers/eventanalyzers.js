// Generated by CoffeeScript 1.7.1
(function() {
  var EmailAnalyzer, EventAnalyzer, EventEmitter, TransactionAnalyzer, body, buf, ea, promise,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  promise = require('bluebird');

  EventEmitter = require('events').EventEmitter;

  EmailAnalyzer = (function() {
    function EmailAnalyzer() {}

    EmailAnalyzer.prototype.parseMessage = function(message) {
      this.parser = require('packet').createParser();
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var parsed, timeout;
          parsed = false;
          _this.parser.extract("x448, l32 =>virusListLength, l32 =>emailLength", function(header) {
            parsed = true;
            console.log("headers parsed", header);
            return fulfill(header.virusListLength, header.emailLength);
          });
          timeout = function(parsed) {
            if (!parsed) {
              return reject(new Error("Timed out"));
            }
          };
          _this.parser.parse(message);
          return setTimeout(timeout, 10000);
        };
      })(this));
    };

    EmailAnalyzer.prototype.parsevirus = function(message, virusLength, emailLength) {
      var cname, data, email, timestamp, viruslist;
      cname = message.toString('utf-8', 0, 48);
      viruslist = message.toString('utf-8', 64, 64 + virusLength);
      timestamp = message.readDoubleLE(48, 56);
      email = message.toString('utf-8', 64 + virusLength);
      data = {
        cname: cname,
        virusList: viruslist,
        email: email,
        timestamp: new Date(1000 * timestamp)
      };
      return data;
    };

    EmailAnalyzer.prototype.parsemail = function(unparsedEmail) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var MP, mp, timeout;
          MP = require('mailparser').MailParser;
          mp = new MP;
          mp.on('end', function(pemail) {
            var parsedEmail;
            parsedEmail = {
              headers: {
                to: pemail.headers.To,
                from: pemail.headers.from,
                subject: pemail.subject,
                cc: pemail.cc,
                bcc: pemail.bcc,
                inReplyTo: pemail.inReplyTo,
                priority: pemail.priority,
                date: pemail.date
              },
              content: pemail.text != null ? pemail.text : pemail.text = pemail.html,
              attachments: pemail.attachments
            };
            console.log(parsedEmail.headers);
            return fulfill(parsedEmail);
          });
          mp.write(unparsedEmail);
          mp.end();
          timeout = function() {
            return reject(new Error("Timed out"));
          };
          return setTimeout(timeout, 10000);
        };
      })(this));
    };

    return EmailAnalyzer;

  })();

  TransactionAnalyzer = (function() {
    function TransactionAnalyzer() {}

    TransactionAnalyzer.prototype.parseMessage = function(message) {
      this.parser = require('packet').createParser();
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var connect, parsed;
          parsed = false;
          _this.parser.extract("l8[48] => cname, l32 => counter, l64 => timestamp, l32 => duration", function(header) {
            parsed = true;
            header.timestamp = new Date(1000 * header.timestamp);
            return fulfill(header);
          });
          connect = function() {
            if (!parsed) {
              return reject(new Error("Timed out"));
            }
          };
          return setTimeout(connect, 10000);
        };
      })(this));
    };

    return TransactionAnalyzer;

  })();

  EventAnalyzer = (function(_super) {
    __extends(EventAnalyzer, _super);

    function EventAnalyzer() {
      this.emailanalyzer = new EmailAnalyzer;
      this.ta = new TransactionAnalyzer;
    }

    EventAnalyzer.prototype.emailvirus = function(message) {
      return this.emailanalyzer.parseMessage(message).then((function(_this) {
        return function(viruslength, emaillength) {
          var data;
          data = _this.emailanalyzer.parsevirus(message, viruslength, emaillength);
          return _this.emailanalyzer.parsemail(data.email).then(function(parsedemail) {
            var result;
            result = {
              identification: data.cname,
              timestamp: data.timestamp,
              virusNames: data.virus,
              email: parsedemail
            };
            _this.emit('emailvirus.result', result);
          })["catch"](function(error) {
            _this.emit('emailvirus.error', error);
          });
        };
      })(this));
    };

    EventAnalyzer.prototype.transactionHandler = function(message, topic) {
      return this.ta.parseMessage(message).then((function(_this) {
        return function(header) {
          _this.emit('transactions', topic, header);
        };
      })(this))["catch"]((function(_this) {
        return function(error) {
          _this.emit('error', new Error("" + topic + " failed for message " + message));
        };
      })(this));
    };

    EventAnalyzer.prototype.webtransactions = function(message) {
      return this.transactionHandler(message, 'web.transactions');
    };

    EventAnalyzer.prototype.emailtransactions = function(message) {
      return this.transactionHandler(message, 'email.transactions');
    };

    EventAnalyzer.prototype.webvirusviolations = function(message) {
      return this.transactionHandler(message, 'web.virus.violations');
    };

    EventAnalyzer.prototype.emailvirusviolations = function(message) {
      return this.transactionHandler(message, 'email.virus.violations');
    };

    EventAnalyzer.prototype.webcontentfilteringtransactions = function(message) {
      return this.transactionHandler(message, 'web.contentfiltering.transactions');
    };

    EventAnalyzer.prototype.webcontentfilteringviolations = function(message) {
      return this.transactionHandler(message, 'web.contentfiltering.violations');
    };

    EventAnalyzer.prototype.totaltransactions = function(message) {
      return this.transactionHandler(message, 'total.transactions');
    };

    return EventAnalyzer;

  })(EventEmitter);

  module.exports = EventAnalyzer;

  if (require.main === module) {
    ea = new EventAnalyzer;
    body = "From: ravivsn@ravivsn.com\r\n To: kumar@kumar.com\r\n\r\n";
    buf = new Buffer(2048);
    buf.write("testcname\0", 0);
    buf.writeDoubleLE(14000, 48);
    buf.writeUInt32LE(14, 56);
    buf.writeUInt32LE(14, 60);
    buf.write("virus1,virus2", 64);
    buf.write(body, 78);
    ea.emailvirus(buf);
    ea.on('emailvirus.result', function(result) {});
    ea.on('emailvirus.error', function(error) {});
  }

  module.exports = EventAnalyzer;

}).call(this);
