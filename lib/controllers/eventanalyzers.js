// Generated by CoffeeScript 1.8.0
(function() {
  var EmailAnalyzer, EventAnalyzer, EventEmitter, body, buf, ea, parseUInt, promise,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  promise = require('bluebird');

  EventEmitter = require('events').EventEmitter;

  parseUInt = require('../helpers/utils').parseUInt;

  EmailAnalyzer = (function() {
    function EmailAnalyzer() {}

    EmailAnalyzer.prototype.parsemail = function(unparsedEmail) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var MP, buf, mp, timeout;
          MP = require('mailparser').MailParser;
          mp = new MP;
          mp.on('end', function(pemail) {
            var parsedEmail;
            parsedEmail = {
              headers: pemail.headers,
              content: pemail.text != null ? pemail.text : pemail.text = pemail.html,
              attachments: pemail.attachments
            };
            console.log("Debug: parsed email headers are ", pemail.headers);
            if (pemail.headers === {}) {
              return reject(new Error("Failed to parse headers"));
            }
            return fulfill(parsedEmail);
          });
          buf = new Buffer(unparsedEmail, 'base64');
          mp.write(buf.toString());
          mp.end();
          timeout = function() {
            return reject(new Error("Timed out"));
          };
          return setTimeout(timeout, 10000);
        };
      })(this));
    };

    return EmailAnalyzer;

  })();

  EventAnalyzer = (function(_super) {
    __extends(EventAnalyzer, _super);

    function EventAnalyzer() {
      this.emailanalyzer = new EmailAnalyzer;
    }

    EventAnalyzer.prototype.stripHeader = function(message) {
      var buf, content, data, formatdate, gottime, header, headers, msgs, value, _base;
      content = {};
      msgs = message.split(" {");
      headers = msgs[0].split(' ');
      console.log("Debug: headers rcvd are ", headers);
      header = {
        priority: parseUInt(headers[0]),
        timestamp: parseUInt(headers[1]),
        format: headers.pop(),
        cname: ((function() {
          var _i, _len, _ref, _results;
          _ref = headers.slice(2, headers.length);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            buf = _ref[_i];
            _results.push(buf);
          }
          return _results;
        })()).join(' ')
      };
      data = message.substring(msgs[0].length, message.length);
      console.log("Debug: data in the payload is ", data);
      content.header = header;
      content.data = JSON.parse(data);
      console.log("Debug: start in data is ", content.data.start);
      if ((_base = content.data).start == null) {
        _base.start = content.data.timestamp;
      }
      value = parseUInt(content.data.start);
      gottime = new Date(value * 1000);
      formatdate = gottime.getFullYear() + "-" + gottime.getMonth() + "-" + gottime.getDate();
      content.data.timestamp = formatdate;
      console.log("Debug: rcvd timestamp is ", content.data.timestamp, gottime);
      return content;
    };

    EventAnalyzer.prototype.decodeBinarySyslog = function(content) {
      var cname, cnameLen, data, format, formatLen, message, msgLen, syslog, timestamp;
      data = content.data;
      syslog = {};
      if (content.size < 20) {
        return syslog;
      }
      syslog.pri = data.readUInt8(0);
      timestamp = data.readUInt32LE(1);
      syslog.timestamp = new Date((1000 * timestamp).toLocaleDateString());
      cnameLen = data.readUInt32LE(5);
      formatLen = data.readUInt32LE(9);
      msgLen = data.readUInt32LE(13);
      cname = data.slice(17, cnameLen);
      syslog.cname = cname.toString();
      format = data.slice(17 + cnameLen, formatLen);
      syslog.format = format.toString();
      message = data.slice(17 + cnameLen + formatLen, msgLen);
      syslog.message = JSON.parse(message.toString());
      console.log("Debug: analyzed syslog message is ", syslog);
      return syslog;
    };

    EventAnalyzer.prototype.emailvirus = function(content) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          return _this.emailanalyzer.parsemail(content.data.mail).then(function(parsedemail) {
            var result;
            result = {
              id: "",
              virusNames: content.data.virus,
              timestamp: content.data.timestamp,
              mail: parsedemail
            };
            return fulfill(result);
          })["catch"](function(error) {
            return reject(error);
          });
        };
      })(this));
    };

    return EventAnalyzer;

  })(EventEmitter);

  module.exports = EventAnalyzer;

  if (require.main === module) {
    ea = new EventAnalyzer;
    body = "From: ravivsn@ravivsn.com\r\n To: kumar@kumar.com\r\n\r\n";
    buf = new Buffer(2048);
    buf.write("testcname\0", 0);
    buf.writeDoubleLE(14000, 48);
    buf.writeUInt32LE(14, 56);
    buf.writeUInt32LE(14, 60);
    buf.write("virus1,virus2", 64);
    buf.write(body, 78);
  }

}).call(this);
