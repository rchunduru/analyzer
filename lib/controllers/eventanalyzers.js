// Generated by CoffeeScript 1.8.0
(function() {
  var EmailAnalyzer, EventAnalyzer, EventEmitter, body, buf, ea, promise,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  promise = require('bluebird');

  EventEmitter = require('events').EventEmitter;

  EmailAnalyzer = (function() {
    function EmailAnalyzer() {}

    EmailAnalyzer.prototype.parsemail = function(unparsedEmail) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var MP, mp, timeout;
          MP = require('mailparser').MailParser;
          mp = new MP;
          mp.on('end', function(pemail) {
            var parsedEmail;
            parsedEmail = {
              headers: {
                to: pemail.headers.To,
                from: pemail.headers.from,
                subject: pemail.subject,
                cc: pemail.cc,
                bcc: pemail.bcc,
                inReplyTo: pemail.inReplyTo,
                priority: pemail.priority,
                date: pemail.date
              },
              content: pemail.text != null ? pemail.text : pemail.text = pemail.html,
              attachments: pemail.attachments
            };
            console.log(parsedEmail.headers);
            return fulfill(parsedEmail);
          });
          mp.write(unparsedEmail);
          mp.end();
          timeout = function() {
            return reject(new Error("Timed out"));
          };
          return setTimeout(timeout, 10000);
        };
      })(this));
    };

    return EmailAnalyzer;

  })();

  EventAnalyzer = (function(_super) {
    __extends(EventAnalyzer, _super);

    function EventAnalyzer() {
      this.emailanalyzer = new EmailAnalyzer;
    }

    EventAnalyzer.prototype.stripHeader = function(message) {
      var data, size;
      size = message.readUInt32LE(0);
      data = message.slice(4, size);
      return data;
    };

    EventAnalyzer.prototype.decodeBinarySyslog = function(data) {
      var cname, cnameLen, format, formatLen, message, msgLen, syslog, timestamp;
      syslog = {};
      syslog.pri = data.readUInt8(0);
      timestamp = data.readUInt32LE(1);
      header.timestamp = new Date(1000 * timestamp);
      cnameLen = data.readUInt32LE(5);
      formatLen = data.readUInt32LE(9);
      msgLen = data.readUInt32LE(13);
      cname = data.slice(17, cnameLen);
      syslog.cname = cname.toString();
      format = data.slice(17 + cnameLen, formatLen);
      syslog.format = format.toString();
      message = data.slice(17 + cnameLen + formatLen, msgLen);
      syslog.message = JSON.parse(message.toString());
      return syslog;
    };

    EventAnalyzer.prototype.emailvirus = function(syslog) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          return _this.emailanalyzer.parsemail(syslog.message.email).then(function(parsedemail) {
            var result;
            result = {
              id: "",
              virusNames: data.virus,
              timestamp: data.timestamp,
              email: parsedemail
            };
            syslog.parsedemail = result;
            return fulfill(syslog);
          })["catch"](function(error) {
            return reject(error);
          });
        };
      })(this));
    };

    return EventAnalyzer;

  })(EventEmitter);

  module.exports = EventAnalyzer;

  if (require.main === module) {
    ea = new EventAnalyzer;
    body = "From: ravivsn@ravivsn.com\r\n To: kumar@kumar.com\r\n\r\n";
    buf = new Buffer(2048);
    buf.write("testcname\0", 0);
    buf.writeDoubleLE(14000, 48);
    buf.writeUInt32LE(14, 56);
    buf.writeUInt32LE(14, 60);
    buf.write("virus1,virus2", 64);
    buf.write(body, 78);
  }

}).call(this);
