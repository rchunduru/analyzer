// Generated by CoffeeScript 1.8.0
(function() {
  var Base, EventServiceManager, async, db, dbController, mixof, mq, mqController, promise, uuid, validate, validateEventQueueService,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  promise = require('bluebird');

  dbController = require('./database');

  mqController = require('./mq');

  validate = require('json-schema').validate;

  uuid = require('node-uuid');

  async = require('async');

  db = promise.promisifyAll(dbController);

  mq = promise.promisifyAll(mqController);

  mixof = function() {
    var Mixed, base, method, mixin, mixins, name, _i, _ref;
    base = arguments[0], mixins = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    Mixed = (function(_super) {
      __extends(Mixed, _super);

      function Mixed() {
        return Mixed.__super__.constructor.apply(this, arguments);
      }

      return Mixed;

    })(base);
    for (_i = mixins.length - 1; _i >= 0; _i += -1) {
      mixin = mixins[_i];
      _ref = mixin.prototype;
      for (name in _ref) {
        method = _ref[name];
        Mixed.prototype[name] = method;
      }
    }
    return Mixed;
  };

  module.exports.validateEventQueueService = validateEventQueueService = function() {
    var result, schema;
    schema = {
      name: "EventService",
      type: "object",
      additionalProperties: false,
      properties: {
        id: {
          "type": "string",
          "required": "false"
        },
        name: {
          "type": "string",
          "required": "false"
        },
        topic: {
          "type": "string",
          "required": "true"
        },
        identification: {
          "type": "string",
          "required": "true"
        }
      }
    };
    result = validate(this.body, schema);
    if (!result.valid) {
      return this.next(new Error("Invalid Event Queue Service schema! " + (JSON.stringify(result.errors))));
    }
    return this.next();
  };

  Base = (function() {
    function Base() {}

    return Base;

  })();

  EventServiceManager = (function(_super) {
    __extends(EventServiceManager, _super);

    function EventServiceManager(config) {
      var connect;
      EventServiceManager.__super__.constructor.call(this);
      this.eServices = [];
      if (config.db) {
        this.dbclient = this.initDb(config.db.host, config.db.loglevel);
      }
      this.on('connected', function(client) {
        return this.mqclient = client;
      });
      this.on('error', function(err) {
        return setTimeout(connect, config.retryInterval);
      });
      this.logger = config.logger;
      this.logger.debug({
        dbclient: this.dbclient,
        mqclient: this.mqclient
      });
      connect = (function(_this) {
        return function() {
          return _this.connectMq(config.mq.host, config.mq.port, config.mq.username, config.mq.password, config.mq.retryInterval, config.mq.retryCount);
        };
      })(this);
      if (config.mq) {
        connect();
      }
    }

    EventServiceManager.prototype.list = function() {
      if (this.eServices.length === 0) {
        return this.getDocument(this.dbclient, 'service', null, (function(_this) {
          return function(error, document) {
            if (document.hits && document.hits.total > 0) {
              return _this.eServices = document.hits.hits;
            }
          };
        })(this));
      }
    };

    EventServiceManager.prototype._get = function(topic) {
      var existing;
      this.list();
      existing = [];
      existing = this.eServices.filter(function(svc) {
        if (svc._source.topic === topic) {
          return false;
        }
      });
      return existing;
    };

    EventServiceManager.prototype.add = function(service) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var existing;
          existing = _get(service.topic);
          if (existing.length) {
            return fulfill("{result: existing}");
          }
          service.id = uuid.v4();
          return _this.createDocument(_this.dbclient, 'service', service.id, service, function(error, newservice) {
            var subscription;
            if (error) {
              return reject(error);
            }
            subscription = _this.subscribe(service.topic, _this.dummyhandler);
            _this.logger.debug(" new service body is ", newservice);
            newservice.subscription = subscription;
            _this.eServices.push(newservice);
            _this.logger.debug("error is ", error, "newservice is ", newservice);
            return fulfill("{result:success}");
          });
        };
      })(this));
    };

    EventServiceManager.prototype.modify = function(sid, service) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var oldservice, slist;
          _this.list();
          slist = _this.eServices.filter(function(svc) {
            if (svc._source.id === sid) {
              return false;
            }
          });
          if (slist.length === 0) {
            return reject;
          }
          oldservice = slist[0];
          return _this.modifyDocument(_this.dbclient, 'service', sid, service, function(error, newservice) {
            if (error) {
              return reject(error);
            }
            _this.unsubscribe(slist.subscription);
            _this.subscribe(service.topic, _this.dummyhandler);
            _this.eServices = [];
            return fulfill("{result:success}");
          });
        };
      })(this));
    };

    EventServiceManager.prototype["delete"] = function(sid) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          return async.each(_this.eServices, function(svc, next) {
            if (svc._source.id !== sid) {
              return next();
            }
            console.log("svc about to be deleted is ", svc);
            return _this.deleteDocument(_this.dbclient, svc._index, svc._type, svc._id, function(error, response) {
              if (error) {
                return next(error);
              }
              return next();
            });
          }, function(result) {
            if ((result != null) && result instanceof Error) {
              return reject(error);
            }
            _this._get();
            return fulfill("");
          });
        };
      })(this));
    };

    EventServiceManager.prototype.get = function(sid) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          return _this.getDocument(_this.dbclient, 'service', sid, function(error, document) {
            var service;
            if (error instanceof Error) {
              return reject(error);
            }
            if (document.hits && document.hits.total > 0) {
              service = document.hits.hits;
              return fulfill(service);
            } else {
              return fulfill([]);
            }
          });
        };
      })(this));
    };

    EventServiceManager.prototype.getStats = function(sid, apptype) {
      return this.getDocumentStats(this.dbclient, 'service', sid, apptype);
    };

    EventServiceManager.prototype.dummyHandler = function(message) {
      this.logger.debug("recvd message form ActiveMQ", message);
      if (message) {
        return message.ack();
      }
    };

    return EventServiceManager;

  })(mixof(Base, dbController, mqController));

  module.exports.EventServiceManager = EventServiceManager;

}).call(this);
