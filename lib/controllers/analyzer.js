// Generated by CoffeeScript 1.8.0
(function() {
  var AnalyzerManager, AnalyzerService, AnalyzerServices, EA, EM, MM, SA, SD, SR, async, bunyan, parseMessage, parseUInt, parsequery, parseurl, postRequest, promise, uuid, validate,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ({
    body: promise = require('bluebird')
  });

  bunyan = require('bunyan');

  EM = require('./elasticmanager');

  MM = require('./mqmanager');

  validate = require('json-schema').validate;

  uuid = require('node-uuid');

  async = require('async');

  async = require('async');

  SR = require('stormagent').StormRegistry;

  SD = require('stormagent').StormData;

  SA = require('stormagent');

  EA = require('./eventanalyzers');

  parseurl = require('../helpers/utils').parseUrl;

  parseMessage = require('../helpers/utils').parseMessage;

  postRequest = require('../helpers/utils').postRequest;

  parsequery = require('../helpers/utils').parseQuery;

  parseUInt = require('../helpers/utils').parseUInt;

  AnalyzerService = (function(_super) {
    var schema;

    __extends(AnalyzerService, _super);

    schema = {
      name: "AnalyzerService",
      type: "object",
      required: true,
      additionalProperties: true,
      properties: {
        id: {
          "type": "string",
          "required": false
        },
        name: {
          "type": "string",
          "required": false
        },
        output: {
          "type": "string",
          "required": true
        },
        transmitters: {
          "type": "array",
          "required": true
        },
        sources: {
          "type": "array",
          "required": true
        }
      }
    };

    function AnalyzerService(id, data) {
      AnalyzerService.__super__.constructor.call(this, id, data, schema);
      this.em = new EM;
      this.mq = new MM;
      this.ea = new EA;
      this.susbscriptions = {};
      this.topics = [];
      this.mqConnect();
      this.dbConnect();
      this.forEver();
    }

    AnalyzerService.prototype.mqConnect = function() {
      if (this.data && (this.data.sources != null)) {
        return this.data.sources.map((function(_this) {
          return function(source) {
            var connect, parsedurl;
            parsedurl = parseurl(source);
            if (parsedurl.query != null) {
              switch (parsedurl.query.topic.prototype) {
                case 'array':
                  _this.topics = parsedurl.query.topic;
                  break;
                default:
                  _this.topics = [parsedurl.query.topic];
              }
              _this.log("Topics identified to subscribe", _this.topics);
            }
            connect = function() {
              _this.log("Debug: Connecting to MQ hostname", parsedurl.hostname, "port: ", parsedurl.port);
              return _this.mq.connect(parsedurl.hostname, parsedurl.port, parsedurl.username, parsedurl.password, 10000, 5);
            };
            setTimeout(connect, 1000);
            _this.mq.on('mq.connected', function(client) {
              _this.log("Connected to the MQ broker", _this.data.sources);
              _this.log(" ABout to subscribe to ", _this.topics);
              _this.mqclient = client;
              return _this.subscribe();
            });
            return _this.mq.on('mq.error', function(error) {
              _this.mqclient = "";
              _this.subscriptions = {};
              _this.log("MQ connection failure after multiple retries. Error is " + error);
              _this.log("Retrying connection to MQ in 100 seconds");
              return setTimeout(connect, 100000);
            });
          };
        })(this));
      }
    };

    AnalyzerService.prototype.dbConnect = function() {
      var host, parsedurl;
      if (this.data && (this.data.output != null)) {
        parsedurl = parseurl(this.data.output);
        this.log("Elastic DB server details: ", parsedurl);
        host = parsedurl.hostname;
        if (parsedurl.port === !9200) {
          host = parsedurl.host;
        }
        this.eclient = this.em.init({
          host: host,
          loglevel: 'error'
        });
        return this.log("Connected to the Elasticsearch DB", this.data.output);
      }
    };

    AnalyzerService.prototype.subscribe = function() {
      var b, loggersyslog, topic, _i, _len, _ref, _results;
      loggersyslog = (function(_this) {
        return function(message) {
          var bodykey, cname, data, err, msg, objkey, str, strarray, _i, _len;
          if (message.length < 20) {
            return;
          }
          try {
            msg = _this.ea.stripHeader(message.body);
          } catch (_error) {
            err = _error;
            _this.log("Error in stripping header", err);
            return;
          }
          _this.log("Debug: After stripping the header, the msg header is ", msg.header);
          if (msg === {}) {
            return;
          }
          cname = _this.data.sources.filter(function(source) {
            return source === msg.header.cname;
          });
          _this.log("Debug: result of cname is ", cname);
          switch (msg.header.format.toLowerCase()) {
            case 'email.av':
            case 'email.virus':
              return _this.ea.emailvirus(msg).then(function(body) {
                body.id = _this.id;
                _this.mailvirus(body);
              });
            default:
              data = msg.data;
              if (!((data.count != null) && (data.timestamp != null))) {
                return;
              }
              strarray = data.format.split(".");
              if (strarray.length === 1) {
                return;
              }
              bodykey = strarray.pop();
              objkey = "";
              for (_i = 0, _len = strarray.length; _i < _len; _i++) {
                str = strarray[_i];
                objkey += str;
              }
              objkey = objkey.toLowerCase();
              bodykey = bodykey.toLowerCase();
              _this.log("Debug: generated objkey " + objkey + " and bodykey as " + bodykey);
              data.count = parseUInt(data.count);
              return _this.getTransaction().then(function(content) {
                var b, contentvalue, _base, _base1, _base2, _name, _name1;
                if ((_base = content._source).transactions == null) {
                  _base.transactions = {};
                }
                if ((_base1 = content._source.transactions)[_name = b = objkey] == null) {
                  _base1[_name] = {};
                }
                contentvalue = content._source.transactions[b = objkey];
                if ((_base2 = contentvalue)[_name1 = b = bodykey] == null) {
                  _base2[_name1] = 0;
                }
                contentvalue[b = bodykey] += data.count;
                _this.log("Debug: existing: generated transaction is ", content._source.transactions);
                return _this.updateTransaction(content._id, content._source).then(function(result) {}, function(error) {
                  _this.log("Debug: Error in updating the transaction", error, content._source);
                });
              }, function(error) {
                var b, content, contentvalue, transaction, _base, _base1, _name, _name1;
                _this.log("Creating a new data record");
                if ((_base = (transaction = {}))[_name = b = objkey] == null) {
                  _base[_name] = {};
                }
                contentvalue = transaction[b = objkey];
                if ((_base1 = contentvalue)[_name1 = b = bodykey] == null) {
                  _base1[_name1] = 0;
                }
                contentvalue[b = bodykey] = data.count;
                content = {
                  id: _this.id,
                  timestamp: data.timestamp,
                  transactions: transaction
                };
                _this.log("Debug: generated content is ", content);
                return _this.createTransaction(content).then(function(result) {}, function(error) {
                  _this.log(" Failed to create a transaction record in Elastic search", error, content);
                });
              });
          }
        };
      })(this);
      _ref = this.topics;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        topic = _ref[_i];
        _results.push((this.subscriptions != null ? this.subscriptions : this.subscriptions = {})[b = topic] = this.mq.subscribe("/topic/" + topic, loggersyslog));
      }
      return _results;
    };

    AnalyzerService.prototype.mqUnsubscribe = function() {
      var key;
      if (this.mqclient == null) {
        return;
      }
      for (key in this.subscriptions) {
        this.mq.unsubscribe(this.subscriptions[key]);
      }
      return this.mq.disconnect();
    };

    AnalyzerService.prototype.mailvirus = function(emailData) {
      return this.em.createDocument(this.eclient, 'email.virus', this.id, emailData).then((function(_this) {
        return function(response) {
          _this.log("Added email virus ", response);
          return _this.emit('email.virus', _this.id, response._id, emailData);
        };
      })(this), (function(_this) {
        return function(error) {
          return _this.log("Error while adding email virus into elastic DB", error);
        };
      })(this));
    };

    AnalyzerService.prototype.deleteDocument = function(index, type, id) {
      return this.em.deleteDocument(this.eclient, index, type, id);
    };

    AnalyzerService.prototype.cleanElasticDocuments = function() {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          if (!_this.eclient) {
            return fulfill;
          }
          return _this.em.deleteAllDocumentsAsync(_this.eclient, 'email.virus', _this.id).then(function(response) {
            _this.log("Deleted all documents of type email.virus");
            return _this.em.deleteAllDocumentsAsync(_this.eclient, 'transaction.summary', _this.id).then(function(response) {
              _this.log("Deleted all documents of type transaction.summary");
              return fulfill("success");
            }, function(error) {
              _this.log("error while cleaning transaction.summary documents for instance " + _this.id, error);
              return reject(new Error(error));
            });
          }, function(error) {
            _this.log("error while cleaning email.virus documents for instance " + _this.id, error);
            return reject(new Error(error));
          });
        };
      })(this));
    };

    AnalyzerService.prototype.createTransaction = function(content) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          return _this.em.createDocument(_this.eclient, 'transaction.summary', _this.id, content).then(function(result) {
            _this.log('added transaction summary record with content', content);
            return fulfill(result._id);
          }, function(error) {
            _this.log('error in adding transaction record', error);
            return reject(error);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.updateTransaction = function(id, content) {
      return this.em.updateDocument(this.eclient, 'transaction.summary', this.id, id, content).then((function(_this) {
        return function(result) {
          return _this.log('updated transaction summary with content', content);
        };
      })(this), (function(_this) {
        return function(error) {
          return _this.log("error in updating the transaction with id " + id, error);
        };
      })(this));
    };

    AnalyzerService.prototype.getTransaction = function() {
      var body, stoday, today;
      today = new Date();
      stoday = today.getFullYear() + "-" + today.getMonth() + "-" + today.getDate();
      body = {
        query: {
          filtered: {
            query: {
              match_all: {}
            },
            filter: {
              range: {
                timestamp: {
                  gte: stoday
                }
              }
            }
          }
        }
      };
      return new promise((function(_this) {
        return function(fulfill, reject) {
          return _this.em.search(_this.eclient, 'transaction.summary', _this.id, body).then(function(results) {
            if (results === {}) {
              return reject(new Error("no results found"));
            }
            _this.log("Got some results", results.hits);
            if (results.hits.hits.length === 0) {
              return reject(new Error("no results found"));
            }
            if (results.hits.hits.length >= 1) {
              _this.log("Warning More search results.", results.hits.hits);
              return fulfill(results.hits.hits[0]);
            } else {
              return reject(new Error("no results found"));
            }
          }, function(error) {
            _this.log("get transaction failed with error", error);
            return reject(error);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.getStats = function(from, to, interval) {
      var todate;
      if (interval == null) {
        interval = '1d';
      }
      switch (interval) {
        case 'month':
          interval = '1m';
          break;
        case 'day':
          interval = '1d';
          break;
        case 'year':
          interval = '1y';
      }
      if (from == null) {
        from = '2014-01-01';
      }
      if (to == null) {
        todate = new Date();
        to = todate.getFullYear() + "-" + todate.getMonth() + "-" + todate.getDay();
      }
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var body;
          body = {
            aggregations: {
              analyzerstats: {
                date_histogram: {
                  field: "timestamp",
                  interval: interval,
                  format: 'yyyy-mm-dd',
                  extended_bounds: {
                    min: from,
                    max: to
                  }
                },
                aggs: {
                  webVirusTransactions: {
                    sum: {
                      field: "transactions.webvirus.transactions"
                    }
                  },
                  webVirusViolations: {
                    sum: {
                      field: "transactions.webvirus.violations"
                    }
                  },
                  webContentFilteringTransactions: {
                    sum: {
                      field: "transactions.webcontentfiltering.transactions"
                    }
                  },
                  webContentFilteringViolations: {
                    sum: {
                      field: "transactions.webcontentfiltering.violations"
                    }
                  },
                  mailVirusTransactions: {
                    sum: {
                      field: "transactions.mailvirus.transactions"
                    }
                  },
                  mailVirusViolations: {
                    sum: {
                      field: "transactions.mailvirus.violations"
                    }
                  }
                }
              }
            }
          };
          return _this.em.search(_this.eclient, 'transaction.summary', _this.id, body).then(function(results) {
            _this.log("results for getstats are ", results);
            if (Object.keys(results).length === 0) {
              return fulfill([]);
            }
            return fulfill(results.aggregations.analyzerstats.buckets);
          }, function(error) {
            _this.log("Debug: getStats() error is ", error);
            return reject(error);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.cleanup = function() {
      this.mqUnsubscribe();
      return this.cleanElasticDocuments();
    };

    AnalyzerService.prototype.forEver = function() {
      var processEmail;
      processEmail = (function(_this) {
        return function(entry) {
          return new promise(function(fulfill, reject) {
            _this.emit('email.virus', _this.id, entry._id, entry._source);
            return fulfill(entry._id);
          });
        };
      })(this);
      return async.whilst(function() {
        return 1;
      }, (function(_this) {
        return function(searchloop) {
          var body;
          body = {
            query: {
              filtered: {
                query: {
                  match_all: {}
                }
              }
            }
          };
          _this.em.search(_this.eclient, 'email.virus', _this.id, body).then(function(results) {
            if (Object.keys(results).length === 0) {
              return;
            }
            if ((results != null) && (results.hits != null) && (results.hits.hits != null) && results.hits.hits.length === 0) {
              return;
            }
            return promise.all(results.hits.hits.map(function(result) {
              return processEmail(result).then(function(resp) {
                return resp;
              });
            })).then(function(totalResults) {
              return _this.log("total results are ", totalResults);
            });
          }, function(error) {
            return _this.log("Oops, failed to search", error);
          });
          return setTimeout(searchloop, 20000000);
        };
      })(this), (function(_this) {
        return function(err) {
          return _this.log("Alert: Should not be here", err);
        };
      })(this));
    };

    return AnalyzerService;

  })(SD);

  AnalyzerServices = (function(_super) {
    __extends(AnalyzerServices, _super);

    function AnalyzerServices(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new AnalyzerService(key, val);
        if (entry != null) {
          entry.saved = true;
          this.add(key, entry);
          return entry.on('email.virus', (function(_this) {
            return function(type, recordId, emailData) {
              return _this.emit('email.virus', type, recordId, emailData);
            };
          })(this));
        }
      });
      this.on('removed', function(key) {});
      AnalyzerServices.__super__.constructor.call(this, filename);
    }

    AnalyzerServices.prototype.get = function(key) {
      var entry;
      entry = AnalyzerServices.__super__.get.call(this, key);
      if (!((entry != null) && (entry.data != null))) {
        return;
      }
      entry.data.id = entry.id;
      return entry.data;
    };

    AnalyzerServices.prototype.getEntry = function(key) {
      if (!key) {
        return;
      }
      return this.entries[key];
    };

    AnalyzerServices.prototype.add = function(key, entry) {
      if (!((entry != null) && (entry.data != null))) {
        return;
      }
      entry.data.id = entry.id;
      return AnalyzerServices.__super__.add.call(this, key, entry);
    };

    AnalyzerServices.prototype.remove = function(key) {
      var entry;
      entry = this.getEntry(key);
      return entry.cleanup().then((function(_this) {
        return function(resp) {
          return AnalyzerServices.__super__.remove.call(_this, key);
        };
      })(this), (function(_this) {
        return function(error) {
          _this.log("Error in removing the analyzer instance.");
          return new Error("Failed to cleanup the DB or MQ due to error " + error);
        };
      })(this));
    };

    return AnalyzerServices;

  })(SR);

  AnalyzerManager = (function(_super) {
    __extends(AnalyzerManager, _super);

    function AnalyzerManager(config) {
      AnalyzerManager.__super__.constructor.call(this, config);
      this["import"](module);
    }

    AnalyzerManager.prototype.run = function(config) {
      AnalyzerManager.__super__.run.call(this, config);
      this.log("data dir is ", this.config);
      this.aservices = new AnalyzerServices("" + this.config.datadir + "/analyzerservices.db");
      return this.aservices.on('email.virus', (function(_this) {
        return function(type, recordId, emailData) {
          _this.log("Debug: Notifying USG " + _this.config.usgEmailNotify + " with email Data for instance" + type + " and recordId " + recordId);
          return _this.notifyUSG(emailData).then(function(response) {
            var entry;
            _this.log("Successfully updated the USG", response);
            entry = _this.aservices.getEntry(type);
            return entry.deleteDocument('email.virus', type, recordId).then(function(resp) {
              return _this.log("successfully deleted the document of type " + type + " and recordId " + recordId);
            }, function(error) {
              return _this.log("Failed to delete document", error);
            });
          }, function(error) {
            return _this.log("Failed to notify USG", error);
          });
        };
      })(this));
    };

    AnalyzerManager.prototype.addEventService = function(service) {
      this.log("rcvd service", service);
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var aservice, err;
          try {
            aservice = new AnalyzerService(null, service);
          } catch (_error) {
            err = _error;
            _this.log("error is ", err);
            return reject(new Error(err));
          }
          _this.aservices.add(aservice.id, aservice);
          return fulfill(aservice.data);
        };
      })(this));
    };

    AnalyzerManager.prototype.updateEventService = function(id, service) {
      console.log("rcvd contents", "id: " + id, "entry: ", service);
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var aservice, entry, err;
          try {
            aservice = new AnalyzerService(id, service);
          } catch (_error) {
            err = _error;
            return reject(new Error(err));
          }
          entry = _this.aservices.update(aservice.id, aservice);
          return fulfill(entry);
        };
      })(this));
    };

    AnalyzerManager.prototype.getStats = function(id, params) {
      var entry;
      entry = this.aservices.getEntry(id);
      this.log("Debug: entry is " + entry + " and params are " + params);
      return entry.getStats(params.from, params.to, params.interval);
    };

    AnalyzerManager.prototype.notifyUSG = function(emailData) {
      return postRequest(emailData, this.config.usgEmailNotify);
    };

    return AnalyzerManager;

  })(SA);

  module.exports = AnalyzerManager;

}).call(this);
