// Generated by CoffeeScript 1.7.1
(function() {
  var AnalyzerManager, AnalyzerService, AnalyzerServices, EA, EM, MM, SA, SD, SR, async, bunyan, mixof, promise, uuid, validate,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  promise = require('bluebird');

  bunyan = require('bunyan');

  EM = require('./elasticmanager');

  MM = require('./mqmanager');

  validate = require('json-schema').validate;

  uuid = require('node-uuid');

  async = require('async');

  SR = require('stormagent').StormRegistry;

  SD = require('stormagent').StormData;

  SA = require('stormagent');

  EA = require('./eventanalyzers');

  AnalyzerService = (function(_super) {
    var schema;

    __extends(AnalyzerService, _super);

    schema = {
      name: "EventService",
      type: "object",
      required: true,
      additionalProperties: true,
      properties: {
        id: {
          "type": "string",
          "required": false
        },
        name: {
          "type": "string",
          "required": false
        },
        topic: {
          "type": "string",
          "required": true
        },
        identification: {
          "type": "string",
          "required": true
        }
      }
    };

    function AnalyzerService(id, data) {
      AnalyzerService.__super__.constructor.call(this, id, data, schema);
    }

    return AnalyzerService;

  })(SD);

  AnalyzerServices = (function(_super) {
    __extends(AnalyzerServices, _super);

    function AnalyzerServices(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new AnalyzerService(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('removed', function(key) {});
      AnalyzerServices.__super__.constructor.call(this, filename);
    }

    AnalyzerServices.prototype.get = function(key) {
      var entry;
      entry = AnalyzerServices.__super__.get.call(this, key);
      if (entry == null) {
        return;
      }
      if ((entry.data != null) && entry.data instanceof AnalyzerService) {
        entry.data.id = entry.id;
        return entry.data;
      } else {
        return entry;
      }
    };

    AnalyzerServices.prototype.match = function(data) {
      var entry, instance, key;
      for (key in this.entries) {
        entry = this.entries[key];
        if (!((entry != null) && (entry.data != null))) {
          return;
        }
        instance = entry.data;
        if (instance.topic === data.topic) {
          return instance;
        }
      }
    };

    return AnalyzerServices;

  })(SR);

  mixof = function() {
    var Mixed, base, method, mixin, mixins, name, _i, _ref;
    base = arguments[0], mixins = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    Mixed = (function(_super) {
      __extends(Mixed, _super);

      function Mixed() {
        return Mixed.__super__.constructor.apply(this, arguments);
      }

      return Mixed;

    })(base);
    for (_i = mixins.length - 1; _i >= 0; _i += -1) {
      mixin = mixins[_i];
      _ref = mixin.prototype;
      for (name in _ref) {
        method = _ref[name];
        Mixed.prototype[name] = method;
      }
    }
    return Mixed;
  };

  AnalyzerManager = (function(_super) {
    __extends(AnalyzerManager, _super);

    function AnalyzerManager(config) {
      AnalyzerManager.__super__.constructor.call(this, config);
      this.config = config;
      this["import"](module);
    }

    AnalyzerManager.prototype.run = function(config) {
      var connect, em;
      AnalyzerManager.__super__.run.call(this, config);
      this.mq = new MM(this.config.mq);
      em = promise.promsifyAll(EM.prototype);
      this.edb = new em(this.config.edb);
      this.ea = new EA;
      this.log("data dir is ", this.config);
      this.aservices = new AnalyzerServices("" + this.config.datadir + "/analyzerservices.db");
      if (this.config.edb) {
        this.eclient = this.edb.init(this.config.edb.host, this.config.edb.logevel);
      }
      this.mq.on('mq.error', function(err) {
        this.log("Failed to connect to MQ. Error is ", err);
        return setTimeout(connect, this.config.retryInterval);
      });
      connect = (function(_this) {
        return function() {
          _this.log("Connecting to MQ...");
          return _this.mq.connect(_this.config.mq.host, _this.config.mq.port, _this.config.mq.username, _this.config.mq.password, _this.config.mq.retryInterval, _this.config.mq.retryCount);
        };
      })(this);
      connect();
      this.mq.on('mq.connected', (function(_this) {
        return function(mqclient) {
          _this.mqclient = mqclient;
          _this.log.debug("MQ client instance created to broker " + _this.config.mq.host + " port " + _this.config.mq.port);
          _this.aservices.on('added', function(aservice) {
            aservice.subscription = _this.subscribe(aservice.data.topic, aservice.data.handler);
            return _this.log.debug("Subscribed to topic " + aservice.data.topic);
          });
          _this.aservices.on('updated', function(aservice) {
            _this.unsubscribe(aservice.subscription);
            aservice.subscription = _this.subscribe(aservice.data.topic, aservice.data.handler);
            return _this.log.debug("Subscribed to topic " + aservice.data.topic);
          });
          return _this.aservices.on('removed', function(aservice) {
            return _this.unsubscribe(aservice.subscription);
          });
        };
      })(this));
      this.ea.on('email.virus.result', (function(_this) {
        return function(emailData) {
          return _this.eclient.createDocumentAsync(emailData.cname, 'email.virus', emailData).then(function(response) {
            return this.log("Added email virus ", response);
          }, function(error) {
            return this.log("Error while adding email virus into elastic DB", error);
          });
        };
      })(this));
      this.ea.on('email.virus.error', (function(_this) {
        return function(error) {
          return _this.log(error);
        };
      })(this));
      this.ea.on('transactions', (function(_this) {
        return function(topic, transaction) {
          return _this.eclient.createDocumentAsync(emailData.cname, topic, transaction).then(function(response) {
            return this.log("Added email virus ", response);
          }, function(error) {
            return this.log("Error while adding transaction of type " + topic + " into elastic DB", error);
          });
        };
      })(this));
      return this.ea.on('error', function(error) {
        return this.log(error);
      });
    };

    AnalyzerManager.prototype.setHandler = function(service) {
      var handler, hlist, word, _i, _len;
      hlist = service.data.topic.split('.');
      handler = "@ea.";
      for (_i = 0, _len = hlist.length; _i < _len; _i++) {
        word = hlist[_i];
        handler += word;
      }
      service.data.handler = eval(handler);
    };

    AnalyzerManager.prototype.addEventService = function(service) {
      this.log("rcvd service", service);
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var aservice, err, old;
          try {
            aservice = new AnalyzerService(null, service);
          } catch (_error) {
            err = _error;
            return reject(new Error(err));
          }
          old = _this.aservices.match(aservice.data);
          if (old != null) {
            console.log("Found matching Analyzer service ", old);
            return fulfill(409);
          }
          _this.setHandler(aservice);
          _this.aservices.add(aservice.id, aservice);
          console.log("New Analyzer service added", aservice);
          return fulfill(aservice);
        };
      })(this));
    };

    AnalyzerManager.prototype.updateEventService = function(id, service) {
      console.log("rcvd contents", "id: " + id, "entry: ", service);
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var aservice, entry, err;
          try {
            aservice = new AnalyzerService(id, service);
          } catch (_error) {
            err = _error;
            return reject(new Error(err));
          }
          _this.setHandler(aservice);
          entry = _this.aservices.update(aservice.id, aservice);
          return fulfill(entry);
        };
      })(this));
    };

    AnalyzerManager.prototype.getStats = function(sid, apptype) {
      return this.getDocumentStats(this.dbclient, 'service', sid, apptype);
    };

    AnalyzerManager.prototype.dummyHandler = function(message) {
      console.log("recvd message form ActiveMQ", message);
      if (message) {
        return message.ack();
      }
    };

    return AnalyzerManager;

  })(SA);

  module.exports = AnalyzerManager;

}).call(this);
