// Generated by CoffeeScript 1.7.1
(function() {
  var AnalyzerManager, AnalyzerService, AnalyzerServices, EA, EM, MM, SA, SD, SR, async, bunyan, parseMessage, parseurl, promise, uuid, validate,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  promise = require('bluebird');

  bunyan = require('bunyan');

  EM = require('./elasticmanager');

  MM = require('./mqmanager');

  validate = require('json-schema').validate;

  uuid = require('node-uuid');

  async = require('async');

  SR = require('stormagent').StormRegistry;

  SD = require('stormagent').StormData;

  SA = require('stormagent');

  EA = require('./eventanalyzers');

  parseurl = require('../helpers/utils').parseUrl;

  parseMessage = require('../helpers/utils').parseMessage;

  AnalyzerService = (function(_super) {
    var schema;

    __extends(AnalyzerService, _super);

    schema = {
      name: "AnalyzerService",
      type: "object",
      required: true,
      additionalProperties: true,
      properties: {
        id: {
          "type": "string",
          "required": false
        },
        name: {
          "type": "string",
          "required": false
        },
        output: {
          "type": "string",
          "required": true
        },
        transmitters: {
          "type": "array",
          "required": true
        },
        sources: {
          "type": "array",
          "required": true
        }
      }
    };

    function AnalyzerService(id, data) {
      AnalyzerService.__super__.constructor.call(this, id, data, schema);
      this.em = promise.promisifyAll(EM.prototype);
      this.log("Debug: Elastic manager object is ", this.em);
      this.mq = new MM;
      this.ea = new EA;
      this.susbscriptions = {};
      this.topics = [];
      this.mqConnect();
      this.dbConnect();
    }

    AnalyzerService.prototype.mqConnect = function() {
      if (this.data && (this.data.sources != null)) {
        return this.data.sources.map((function(_this) {
          return function(source) {
            var connect, parsedurl;
            parsedurl = parseurl(source);
            if ((parsedurl.query != null) && (parsedurl.query.topic != null)) {
              parsedurl.query.topic.map(function(topic) {
                return _this.topics.push(topic);
              });
            }
            connect = function() {
              return _this.mq.connect(parsedurl.hostname, parsedurl.port, parsedurl.username, parsedurl.password, 10000, 5);
            };
            _this.mq.on('mq.connected', function(client) {
              _this.log("Connected to the MQ broker", data.sources);
              _this.mqclient = client;
              return _this.subscribe();
            });
            return _this.mq.on('mq.error', function(error) {
              _this.mqclient = "";
              _this.subscriptions = {};
              _this.log("MQ connection failure after multiple retries. Error is " + error);
              _this.log("Retrying connection to MQ in 100 seconds");
              return setTimeout(connect, 100000);
            });
          };
        })(this));
      }
    };

    AnalyzerService.prototype.dbConnect = function() {
      var parsedurl;
      if (this.data && (this.data.output != null)) {
        parsedurl = parseurl(this.data.output);
        this.log("Elastic DB server details: ", parsedurl);
        this.eclient = this.em.init({
          host: parsedurl.host,
          loglevel: 'error'
        });
        return this.log("Connected to the Elasticsearch DB", this.data.output);
      }
    };

    AnalyzerService.prototype.subscribe = function() {
      return this.topics.map((function(_this) {
        return function(topic) {
          switch (topic) {
            case 'web.contentfiltering.transactions':
              return _this.subscriptions[topic] = _this.subscribe("/topic/" + topic, _this.webcontentfilteringtransactions);
            case 'web.contentfiltering.violations':
              return _this.subscriptions[topic] = _this.subscribe("/topic/" + topic, _this.webcontentfilteringviolations);
            case 'mail.virus.result':
              return _this.subscriptions[topic] = _this.subscribe("/topic/" + topic, _this.mailvirusresult);
            case 'mail.virus.violations':
              return _this.subscriptions[topic] = _this.subscribe("/topic/" + topic, _this.mailvirusviolations);
            case 'mail.virus.transactions':
              return _this.subscriptions[topic] = _this.subscribe("/topic/" + topic, _this.mailvirustransactions);
            case 'web.virus.violations':
              return _this.subscriptions[topic] = _this.subscribe("/topic/" + topic, _this.webvirusviolations);
            case 'web.virus.transactions':
              return _this.subscriptions[topic] = _this.subscribe("/topic/" + topic, _this.webvirustransactions);
            case 'transactions':
              return _this.subscriptions[topic] = _this.subscribe("/topic/" + topic, _this.transactions);
          }
        };
      })(this));
    };

    AnalyzerService.prototype.mailvirusresult = function(message) {
      return parseMessage(message).then((function(_this) {
        return function(emailData) {
          _this.log("Email Data recvd is", emailData);
          return _this.eclient.createDocumentAsync(_this.id, 'email.virus', emailData).then(function(response) {
            return this.log("Added email virus ", response);
          }, function(error) {
            return this.log("Error while adding email virus into elastic DB", error);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.webcontentfilteringtransactions = function(message) {
      parseMessage(message).then((function(_this) {
        return function(transaction) {
          return _this.getTransaction().then(function(content) {
            var _base, _base1;
            if ((_base = content._source).transactions == null) {
              _base.transactions = {};
            }
            if ((_base1 = content._source.transactions).webContentFiltering == null) {
              _base1.webContentFiltering = {};
            }
            content._source.transactions.webContentFiltering.transactions += transaction.count;
            return _this.updateTransaction(content._id, content._source);
          });
        };
      })(this), (function(_this) {
        return function(error) {
          var entry;
          return entry = {
            timestamp: transaction.start,
            transactions: {
              webContentFiltering: {
                transactions: transaction.count
              }
            }
          };
        };
      })(this));
      return this.createTransaction(content);
    };

    AnalyzerService.prototype.webcontentfilteringviolations = function(message) {
      return parseMessage(message).then((function(_this) {
        return function(transaction) {
          return _this.getTransaction().then(function(content) {
            var _base, _base1;
            if ((_base = content._source).transactions == null) {
              _base.transactions = {};
            }
            if ((_base1 = content._source.transactions).webContentFiltering == null) {
              _base1.webContentFiltering = {};
            }
            content._source.transactions.webContentFiltering.violations += transaction.count;
            return _this.updateTransaction(content._id, content._source);
          }, function(error) {
            var entry;
            entry = {
              timestamp: transaction.start,
              transactions: {
                webContentFiltering: {
                  violations: transaction.count
                }
              }
            };
            return _this.createTransaction(content);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.emailvirusviolations = function(message) {
      return parseMessage(message).then((function(_this) {
        return function(transaction) {
          return _this.getTransaction().then(function(content) {
            var _base, _base1;
            if ((_base = content._source).transactions == null) {
              _base.transactions = {};
            }
            if ((_base1 = content._source.transactions).emailVirus == null) {
              _base1.emailVirus = {};
            }
            content._source.transactions.emailVirus.violations += transaction.count;
            return _this.updateTransaction(content._id, content._source);
          }, function(error) {
            var entry;
            entry = {
              timestamp: transaction.start,
              transactions: {
                emailVirus: {
                  violations: transaction.count
                }
              }
            };
            return _this.createTransaction(content);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.emailvirustransactions = function(message) {
      return parseMessage(message).then((function(_this) {
        return function(transaction) {
          return _this.getTransaction().then(function(content) {
            var _base, _base1;
            if ((_base = content._source).transactions == null) {
              _base.transactions = {};
            }
            if ((_base1 = content._source.transactions).emailVirus == null) {
              _base1.emailVirus = {};
            }
            content._source.transactions.emailVirus.transactions += transaction.count;
            return _this.updateTransaction(content._id, content._source);
          }, function(error) {
            var entry;
            entry = {
              timestamp: transaction.start,
              transactions: {
                emailVirus: {
                  transactions: transaction.count
                }
              }
            };
            return _this.createTransaction(content);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.webvirusviolations = function(message) {
      return parseMessage(message).then((function(_this) {
        return function(transaction) {
          return _this.getTransaction().then(function(content) {
            var _base, _base1;
            if ((_base = content._source).transactions == null) {
              _base.transactions = {};
            }
            if ((_base1 = content._source.transactions).webVirus == null) {
              _base1.webVirus = {};
            }
            content._source.transactions.webVirus.violations += transaction.count;
            return _this.updateTransaction(content._id, content._source);
          }, function(error) {
            var entry;
            entry = {
              timestamp: transaction.start,
              transactions: {
                webVirus: {
                  violations: transaction.count
                }
              }
            };
            return _this.createTransaction(content);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.webvirustransactions = function(message) {
      return parseMessage(message).then((function(_this) {
        return function(transaction) {
          return _this.getTransaction().then(function(content) {
            var _base, _base1;
            if ((_base = content._source).transactions == null) {
              _base.transactions = {};
            }
            if ((_base1 = content._source.transactions).webVirus == null) {
              _base1.webVirus = {};
            }
            content._source.transactions.webVirus.transactions += transaction.count;
            return _this.updateTransaction(content._id, content._source);
          }, function(error) {
            var entry;
            entry = {
              timestamp: transaction.start,
              transactions: {
                webVirus: {
                  transactions: transaction.count
                }
              }
            };
            return _this.createTransaction(content);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.transactions = function(message) {
      return parseMessage(message).then((function(_this) {
        return function(transaction) {
          return _this.getTransaction().then(function(content) {
            var _base, _base1;
            if ((_base = content._source).transactions == null) {
              _base.transactions = {};
            }
            if ((_base1 = content._source.transactions).count == null) {
              _base1.count = 0;
            }
            content._source.transactions.count += transaction.count;
            return _this.updateTransaction(content._id, content);
          }, function(error) {
            var entry;
            entry = {
              timestamp: transaction.start,
              transactions: {
                count: transaction.count
              }
            };
            return _this.createTransaction(content);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.createTransaction = function(content) {
      return this.eclient.ceateDocument(this.eclient, this.id, 'transaction.summary', content).then(function(result) {
        return this.log('added transaction summary record with content', content);
      }, function(error) {
        return this.log('error in adding transaction record', error);
      });
    };

    AnalyzerService.prototype.updateTransaction = function(id, content) {
      return this.eclient.updateDocument(this.eclient, this.id, 'transaction.summary', content).then(function(result) {
        return this.log('updated transaction summary with content', content);
      }, function(error) {
        return this.log("error in updating the transaction with id " + id, error);
      });
    };

    AnalyzerService.prototype.getTransaction = function() {
      var body;
      body = {
        query: {
          filtered: {
            query: {
              match_all: {}
            },
            filter: {
              range: {
                timestamp: {
                  gte: "now/d"
                }
              }
            }
          }
        }
      };
      return new promise((function(_this) {
        return function(fulfill, reject) {
          return _this.eclient.search(_this.eclient, _this.id, 'transaction.summary', body).then(function(results) {
            if (results.length > 1) {
              _this.log("Warning More search results.", results);
              return fulfill(results[0]);
            }
          }, function(error) {
            return reject(error);
          });
        };
      })(this));
    };

    AnalyzerService.prototype.getStats = function(from, to, interval) {
      if (interval == null) {
        interval = '1d';
      }
      switch (interval) {
        case 'month':
          interval = '1m';
          break;
        case 'day':
          interval = '1d';
          break;
        case 'year':
          interval = '1y';
      }
      if (from == null) {
        from = '2014-01-01';
      }
      if (to == null) {
        to = new Date();
      }
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var body;
          body = {
            aggregations: {
              stats: {
                date_historgram: {
                  field: "timestamp",
                  interval: interval,
                  format: 'yyyy-mm-dd',
                  extended_bounds: {
                    min: from,
                    max: to
                  }
                },
                aggs: {
                  webVirusTransactions: {
                    sum: {
                      field: "transactions.webVirus.transactions"
                    }
                  },
                  webVirusViolations: {
                    sum: {
                      field: "transactions.webVirus.violations"
                    }
                  },
                  webContentFilteringTransactions: {
                    sum: {
                      field: "transactions.webContentFiltering.transactions"
                    }
                  },
                  webContentFilteringViolations: {
                    sum: {
                      field: "transactions.webContentFiltering.violations"
                    }
                  },
                  mailVirusTransactions: {
                    sum: {
                      field: "transactions.mailVirus.transactions"
                    }
                  },
                  mailVirusViolations: {
                    sum: {
                      field: "transactions.mailVirus.violations"
                    }
                  }
                }
              }
            }
          };
          return _this.em.searchAsync(_this.eclient, _this.id, 'transaction.summary', body).then(function(results) {
            return fulfill(results);
          }, function(error) {
            return reject(error);
          });
        };
      })(this));
    };

    return AnalyzerService;

  })(SD);

  AnalyzerServices = (function(_super) {
    __extends(AnalyzerServices, _super);

    function AnalyzerServices(filename) {
      this.on('load', function(key, val) {
        var entry;
        entry = new AnalyzerService(key, val);
        if (entry != null) {
          entry.saved = true;
          return this.add(key, entry);
        }
      });
      this.on('removed', function(key) {});
      AnalyzerServices.__super__.constructor.call(this, filename);
    }

    AnalyzerServices.prototype.get = function(key) {
      var entry;
      entry = AnalyzerServices.__super__.get.call(this, key);
      if (!((entry != null) && (entry.data != null))) {
        return;
      }
      entry.data.id = entry.id;
      return entry.data;
    };

    AnalyzerServices.prototype.getEntry = function(key) {
      if (!key) {
        return;
      }
      return this.entries[key];
    };

    AnalyzerServices.prototype.add = function(key, entry) {
      if (!((entry != null) && (entry.data != null))) {
        return;
      }
      entry.data.id = entry.id;
      return AnalyzerServices.__super__.add.call(this, key, entry);
    };

    return AnalyzerServices;

  })(SR);

  AnalyzerManager = (function(_super) {
    __extends(AnalyzerManager, _super);

    function AnalyzerManager(config) {
      AnalyzerManager.__super__.constructor.call(this, config);
      this.config = config;
      this["import"](module);
    }

    AnalyzerManager.prototype.run = function(config) {
      AnalyzerManager.__super__.run.call(this, config);
      this.log("data dir is ", this.config);
      return this.aservices = new AnalyzerServices("" + this.config.datadir + "/analyzerservices.db");
    };

    AnalyzerManager.prototype.addEventService = function(service) {
      this.log("rcvd service", service);
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var aservice, err;
          try {
            aservice = new AnalyzerService(null, service);
          } catch (_error) {
            err = _error;
            _this.log("error is ", err);
            return reject(new Error(err));
          }
          _this.aservices.add(aservice.id, aservice);
          return fulfill(aservice.data);
        };
      })(this));
    };

    AnalyzerManager.prototype.updateEventService = function(id, service) {
      console.log("rcvd contents", "id: " + id, "entry: ", service);
      return new promise((function(_this) {
        return function(fulfill, reject) {
          var aservice, entry, err;
          try {
            aservice = new AnalyzerService(id, service);
          } catch (_error) {
            err = _error;
            return reject(new Error(err));
          }
          entry = _this.aservices.update(aservice.id, aservice);
          return fulfill(entry);
        };
      })(this));
    };

    AnalyzerManager.prototype.getStats = function(id, params) {
      var entry;
      entry = this.aservices.getEntry(id);
      return entry.getStats(params.from, params.to, params.interval);
    };

    AnalyzerManager.prototype.dummyHandler = function(message) {
      console.log("recvd message form ActiveMQ", message);
      if (message) {
        return message.ack();
      }
    };

    return AnalyzerManager;

  })(SA);

  module.exports = AnalyzerManager;

}).call(this);
