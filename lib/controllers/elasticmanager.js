// Generated by CoffeeScript 1.8.0
(function() {
  var ElasticController, elasticClient, promise;

  elasticClient = require('elasticsearch');

  promise = require('bluebird');

  ElasticController = (function() {
    function ElasticController() {}

    ElasticController.prototype.init = function(host, loglevel) {
      this.host = host;
      this.loglevel = loglevel;
      if (this.loglevel == null) {
        this.loglevel = 'trace';
      }
      return new elasticClient.Client({
        host: this.host,
        log: this.loglevel,
        keepAlive: true
      });
    };

    ElasticController.prototype.deleteType = function(dbclient, index, type) {
      return dbclient["delete"](index, type, {
        id: '_all'
      });
    };

    ElasticController.prototype.createDocument = function(dbclient, index, type, body) {
      var content;
      content = {
        index: index,
        type: type,
        body: body
      };
      console.log("content is ", content);
      return dbclient.create(content);
    };

    ElasticController.prototype.updateDocument = function(dbclient, index, type, id, body) {
      return dbclient.update({
        index: index,
        type: type,
        id: id,
        body: {
          doc: body
        }
      });
    };

    ElasticController.prototype.deleteDocument = function(dbclient, index, type, id) {
      return dbclient["delete"]({
        index: index,
        type: type,
        id: id,
        ignoreUnavailable: true
      });
    };

    ElasticController.prototype.deleteAllDocuments = function(dbclient, index, type) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          dbclient["delete"]({
            index: index,
            type: type,
            id: '_all',
            ignoreUnavailable: true
          }).then(function(response) {
            return fulfill("success");
          }, function(error) {});
          return reject(error);
        };
      })(this));
    };

    ElasticController.prototype.getDocument = function(dbclient, index, type) {
      var content;
      content = {
        index: index
      };
      if (type) {
        content.type = type;
      }
      return this.search(dbclient, content);
    };

    ElasticController.prototype.search = function(dbclient, index, type, content) {
      return new promise((function(_this) {
        return function(fulfill, reject) {
          return dbclient.search({
            index: index,
            type: type,
            body: content
          }).then(function(response) {
            if ((response.hits != null) && response.hits.total >= 1) {
              return fulfill(response.hits);
            } else {
              return fulfill([]);
            }
          }, function(error) {
            return reject(error);
          });
        };
      })(this));
    };

    return ElasticController;

  })();

  module.exports = ElasticController;

}).call(this);
